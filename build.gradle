buildscript {
    ext {
        grailsVersion = project.grailsVersion
        shiroVersion = "1.8.0"
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://dl.bintray.com/jfrog/jfrog-jars" }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2"
    }
}

version "4.5.8"
group "com.nerderg.plugins"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "maven-publish"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-gsp"
apply plugin: 'org.asciidoctor.convert'

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://dl.bintray.com/jfrog/jfrog-jars" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.mindrot:jbcrypt:0.4"
    console "org.grails:grails-console"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    profile "org.grails.profiles:web-plugin"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"

    ['ehcache', 'core', 'spring', 'web'].each { pkg ->
        compile("org.apache.shiro:shiro-$pkg:$shiroVersion") {
            exclude module: 'ejb'
            exclude module: 'jsf-api'
            exclude module: 'servlet-api'
            exclude module: 'jsp-api'
            exclude module: 'jstl'
            exclude module: 'jms'
            exclude module: 'connector-api'
            exclude module: 'ehcache-core'
            exclude module: 'slf4j-api'
            exclude module: 'commons-logging'
        }
    }
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'grails-shiro'
            version = project.version
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "Grails shrio plugin"
                description = "Secure your Grails application quickly and easily using the Apache Shiro security framework."
                url = "http://nerderg.com/Grails+shiro"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'pmcneil'
                        name = 'Peter McNeil'
                        email = 'peter@nerderg.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/nerdErg/grails-shiro'
                    developerConnection = ''
                }
            }

        }
    }
}


task shiroTest(type: Test) {
    dependsOn "publishToMavenLocal"
    //clean up anything left behind
    doFirst {
        delete "$projectDir/src/test/app"
    }

    doLast {
        mkdir "$projectDir/src/test/app"
        exec {
            workingDir "$projectDir/src/test/app"
            commandLine 'grails', 'create-app', 'shiro-tester'
        }

        def fixtures = "$projectDir/src/test/fixtures"
        def grailsApp = "$projectDir/src/test/app/shiro-tester/grails-app"
        def testSrc = "$projectDir/src/test/app/shiro-tester/src/"

        copy {
            from file("$fixtures/BootStrap.groovy")
            into file("$grailsApp/init/shiro/tester")
        }
        copy {
            from "$fixtures/controllers"
            into "$grailsApp/controllers"
        }
        copy {
            from "$fixtures/domain"
            into "$grailsApp/domain"
        }
        copy {
            from "$fixtures/services"
            into "$grailsApp/services"
        }
        copy {
            from "$fixtures/tests/shiro-tester/integration-test"
            into "$testSrc/integration-test"
        }

        //add the plugin
        File build = new File("$projectDir/src/test/app/shiro-tester/build.gradle")
        String content = build.text.replaceFirst('\ndependencies \\{', """dependencies {
    implementation "com.nerderg.plugins:grails-shiro:4.5.8" 
    testImplementation "net.sourceforge.htmlunit:htmlunit:2.70.0"
    testRuntimeOnly 'org.seleniumhq.selenium:htmlunit3-driver:4.26.0'
""")
        content = content.replaceAll(/repositories \{/, '''repositories {
mavenLocal()''')
                         .replaceAll(/chromedriver \{\n *version = '[^']*'/, '''chromedriver {
            version = '130.0.6723.59\'''')
                         .replace('classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.6"', 'classpath "com.github.erdi:webdriver-binaries-gradle-plugin:3.2"')
        build.write(content)
        //add LDAP config

        new File("$grailsApp/conf/application.yml").append('''
---
server:
    servlet:
        context-path: /rainbow
---
security:
    shiro:
        rememberMe:
            cipherKey: 'abcdedfhijklmnopqrstuvwx'
        realm:
            ldap:
                server:
                    urls: ldap://localhost:10389
                search:
                    base: ou=users,dc=example,dc=com
                    user: uid=admin,ou=system
                    pass: secret
                    group:
                        name: ou=groups,dc=example,dc=com
                        member:
                            element: uniqueMember
                            prefix: uid=
                    permission:
                        commonName: cn=permissions
                        member:
                            element: uniqueMember
                            prefix: uid=
                username:
                    attribute: uid''')

        File settings = new File("$projectDir/src/test/app/shiro-tester/settings.gradle")
        settings.write("rootProject.name = 'grails-shiro-tester'")

        exec {
            workingDir "$projectDir/src/test/app/shiro-tester"
            commandLine 'grails', 'shiro-quick-start', '--package=com.nerderg.security'
        }
        exec {
            workingDir "$projectDir/src/test/app/shiro-tester"
            commandLine 'grails', 'generate-all', 'com.nerderg.Book'
        }
        exec {
            workingDir "$projectDir/src/test/app/shiro-tester"
            commandLine 'grails', 'create-shiro-controller-interceptor', 'com.nerderg.Book'
        }
        exec {
            workingDir "$projectDir/src/test/app/shiro-tester"
            commandLine 'grails', 'create-ldap-realm', '--package=com.nerderg.security'
        }

        //delete default failing tests
        delete "$testSrc/integration-test/groovy/com"
        delete "$testSrc/test/groovy/com"

        exec {
            workingDir "$projectDir/src/test/app/shiro-tester"
            commandLine './gradlew', 'integrationTest'
        }

        copy {
            from file("$projectDir/src/test/app/shiro-tester/build/reports/tests")
            into file("$projectDir/build/reports/tests/integrationtests")
        }

        delete "$projectDir/src/test/app"
    }
}

task shiroCliTest(type: Test) {
    dependsOn "publishToMavenLocal"
    //clean up anything left behind
    doFirst {
        delete "$projectDir/src/test/app"
    }

    doLast {
        mkdir "$projectDir/src/test/app"
        exec {
            workingDir "$projectDir/src/test/app"
            commandLine 'grails', 'create-app', 'cli-tester'
        }

        def fixtures = "$projectDir/src/test/fixtures"
        def testSrc = "$projectDir/src/test/app/cli-tester/src/"

        copy {
            from file("$fixtures/tests/cli-tester/unit-test")
            into file("$testSrc/test")
        }

        File build = new File("$projectDir/src/test/app/cli-tester/build.gradle")
        String content = build
                .text
                .replaceFirst('\ndependencies \\{', """dependencies {
    implementation "com.nerderg.plugins:grails-shiro:4.5.8" """)
                .replaceAll(/repositories \{/, '''repositories {
mavenLocal()''')
                .replaceAll(/chromedriver \{\n *version = '[^']*'/, '''chromedriver {
            version = '130.0.6723.59\'''')
                .replace('classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.6"', 'classpath "com.github.erdi:webdriver-binaries-gradle-plugin:3.2"')
        build.write(content)

        File settings = new File("$projectDir/src/test/app/cli-tester/settings.gradle")
        settings.write("rootProject.name = 'grails-shiro-cli-tester'")

        exec {
            workingDir "$projectDir/src/test/app/cli-tester"
            commandLine './gradlew', 'test'
        }

        copy {
            from file("$projectDir/src/test/app/cli-tester/build/reports/tests")
            into file("$projectDir/build/reports/tests/clitests")
        }

        delete "$projectDir/src/test/app"

    }
}

//This needs to be last to work as expected.
tasks.withType(Test) {
//    ensure the LDAP server is running
    doFirst {
        println "Starting LDAP server"
        copy {
            from zipTree("src/test/fixtures/bin/apacheds-2.0.0.AM25.zip")
            into "src/test/fixtures/bin"
        }
        exec {
            workingDir projectDir
            commandLine 'src/test/fixtures/bin/apacheds-2.0.0.AM25/bin/apacheds.sh', 'start'
        }
        sleep(10000) //wait for the server to start on slower machines
    }

    doLast {
        println "Stoping LDAP server"
        try {
            exec {
                workingDir projectDir
                commandLine 'src/test/fixtures/bin/apacheds-2.0.0.AM25/bin/apacheds.sh', 'stop'
            }
        } catch (e) {
            println(e)
        }
        delete "src/test/fixtures/bin/apacheds-2.0.0.AM25"
    }
}

asciidoctor {
    sourceDir = file("docs")
    sources {
        include "Guide.adoc"
    }

    resources {
        from("$sourceDir/resources/images")
        into './resources/images'
    }

    attributes 'source-highlighter': 'coderay',
            toc: '',
            idprefix: '',
            idseparator: '-'

    outputDir = file("build/docs")
}